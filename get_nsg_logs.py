import os, uuid, sys
import json
import argparse
from azure.storage.blob import BlockBlobService, PublicAccess


# Get input arguments
parser = argparse.ArgumentParser(description='Get the latest flow logs in a storage account')
parser.add_argument('--accountName', dest='accountName', action='store',
                    help='you need to supply an storage account name. You can get a list of your storage accounts with this command: az storage account list -o table')
parser.add_argument('--displayLB', dest='displayLB', action='store_true',
                    default=False,
                    help='display or hide flows generated by the Azure LB (default: False)')
parser.add_argument('--displayAllowed', dest='displayAllowed', action='store_true',
                    default=False,
                    help='display as well flows allowed by NSGs (default: False)')
parser.add_argument('--displayDirection', dest='displayDirection', action='store', default='in',
                    help='display flows only in a specific direction. Can be in, out, or both (default in)')
parser.add_argument('--displayHours', dest='displayHours', action='store', type=int, default=1,
                    help='How many hours to look back (default: 1)')
parser.add_argument('--verbose', dest='verbose', action='store_true',
                    default=False,
                    help='run in verbose mode (default: False)')
args = parser.parse_args()

# Setting storage account name and key
accountName = args.accountName
try:
    accountKey = os.environ.get('STORAGE_ACCOUNT_KEY')
except:
    print('The environment variable STORAGE_ACCOUNT_KEY does not exist. You can create it with this command: export STORAGE_ACCOUNT_KEY=$(az storage account keys list -n your_storage_account_name --query [0].value -o tsv)')
    exit(1)
if accountKey == None:
    print('The environment variable STORAGE_ACCOUNT_KEY does not exist. You can create it with this command: export STORAGE_ACCOUNT_KEY=$(az storage account keys list -n your_storage_account_name --query [0].value -o tsv)')
    exit(1)
if args.verbose:
    print('DEBUG: Storage account:', accountName)

# This name should be the same for all blobs for NSG flows 
containerName = "insights-logs-networksecuritygroupflowevent"

# Set to true if only packet drops should be displayed
displayOnlyDrops = not args.displayAllowed

# Set to "in", "out" or "both"
displayDirection = args.displayDirection
if not displayDirection in set(['in', 'out', 'both']):
    print('Please see this script help about how to set the displayDirection argument')

# Set to False if you dont want to see traffic generated by the Azure Load Balancer
displayLB = args.displayLB

# How many blobs to inspect (in an ordered list, there is one blob per minute)
displayHours = args.displayHours

block_blob_service = BlockBlobService(account_name=accountName, account_key=accountKey)
# Create a filtered list of Azure blobs whose resourceId contains /NETWORKSECURITYGROUPS/
blobList = [blob for blob in block_blob_service.list_blobs(containerName) if '/NETWORKSECURITYGROUPS/' in blob.name]

if args.verbose:
    print('DEBUG: Display variables: displayLB:', displayLB, '- displayDirection:', displayDirection, '- displayHours:', displayHours, '- displayOnlyDrops:', displayOnlyDrops)

# Get a list of NSGs
# Using set function to remove duplicate elements
nsgList = list(set([blob.name.split('/')[8] for blob in blobList]))
if args.verbose:
    print('DEBUG: NSGs found in that storage account:', nsgList)

for nsgName in nsgList:
    # Get a list of dates for a given NSG
    dateList = ['/'.join(blob.name.split('/')[9:14]) for blob in blobList if nsgName in blob.name]
    dateList = sorted(dateList, reverse=True)
    dateList = dateList[:displayHours]
    if args.verbose:
        print('DEBUG: Hourly blobs found for NSG', nsgName, ':', dateList, '- displayHours: ', displayHours)

    # Filtered list of blobs that match the list of NSGs and desired dates
    for thisDate in dateList:
        blobMatches = [blob.name for blob in blobList if nsgName in blob.name and thisDate in blob.name]

        for blobName in blobMatches:
            if args.verbose:
                print('DEBUG: Reading blob', blobName)
            localFilename = "flowlog_tmp.json"
            if os.path.exists(localFilename):
                os.remove(localFilename)
            block_blob_service.get_blob_to_path(containerName, blobName, localFilename)
            textData=open(localFilename).read()
            data = json.loads(textData)
            for record in data['records']:
                for rule in record['properties']['flows']:
                    for flow in rule['flows']:
                        for flowtuple in flow['flowTuples']:
                            tupleValues = flowtuple.split(',')
                            srcIp=tupleValues[1]
                            dstIp=tupleValues[2]
                            srcPort=tupleValues[3]
                            dstPort=tupleValues[4]
                            direction=tupleValues[6]
                            action=tupleValues[7]
                            displayRecord = False
                            if action=='D' or not displayOnlyDrops:
                                if (direction == 'I' and displayDirection == 'in') or (direction == 'O' and displayDirection == 'out') or (displayDirection == 'both'):
                                        if srcIp != "168.63.129.16" or displayLB == True:
                                            displayRecord = True
                            if displayRecord:
                                print(record['time'], nsgName, rule['rule'], action, direction, srcIp, srcPort, dstIp, dstPort)

